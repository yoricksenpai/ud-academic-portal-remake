generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id              Int      @id @default(autoincrement())
  studentId       String   @unique
  firstName       String
  lastName        String
  email           String   @unique
  dateOfBirth     DateTime?
  enrolledYear    Int
  major           String?
  enrollments     Enrollment[]
  
  // New fields
  userId          String?
  academicYear    String
  faculty         String
  program         String
  level           String
  registrationDate DateTime @default(now())
  status          Status    @default(PENDING)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Instructor {
  id         Int       @id @default(autoincrement())
  staffId    String    @unique
  firstName  String
  lastName   String
  email      String    @unique
  department String
  courses    Course[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Course {
  id           Int          @id @default(autoincrement())
  courseCode   String       @unique
  title        String
  description  String?
  credits      Int
  semester     String
  instructorId Int
  instructor   Instructor   @relation(fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  classSessions ClassSession[]
}

model ClassSession {
  id          Int      @id @default(autoincrement())
  courseId    Int
  day         String   // e.g., "Monday", "Tuesday"
  startTime   String   // e.g., "08:00"
  endTime     String   // e.g., "10:00"
  location    String
  type        String   // "CM", "TD", or "TP"
  repeatWeekly Boolean @default(true)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  course      Course   @relation(fields: [courseId], references: [id])
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  studentId Int
  courseId  Int
  grade     String?
  status    Status   @default(ENROLLED)
  student   Student  @relation(fields: [studentId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, courseId])
}

enum Status {
  PENDING
  VALIDATED
  REJECTED
  ENROLLED
  COMPLETED
  DROPPED
  WAITLISTED
}